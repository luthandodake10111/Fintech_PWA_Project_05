# Escrow App – System Architecture

This document outlines the overall architecture of the Escrow Service Application, refined to incorporate **React + Vite** on the frontend.

---

## 1. Overview

The system follows a **Client–Server (3-Tier) Architecture**, with clear separation of concerns across the frontend, backend, and database tiers. This setup is modern, scalable, and optimised for both developer experience and production reliability.

---

## 2. Tech Stack

* **Frontend:** React + Vite PWA, hosted on **Vercel**
* **Backend:** Node.js/Express API with **Prisma ORM**, hosted on **Railway**
* **Database:** PostgreSQL on **Railway**
* **Payments:** PayFast API integration
* **External Services:** Email (e.g. SendGrid)

---

## 3. System Diagram

![System Architecture](./docs/system-architecture.png)

> *Replace with your exported diagram PNG.*

---

## 4. Key Benefits of React + Vite

* **Faster Development:** Vite offers instant server start and Hot Module Replacement (HMR), so code changes are reflected instantly.
* **Modern Tooling:** Uses native ES modules and esbuild (Go-based), outperforming older bundlers like Webpack.
* **Optimised Builds:** Extremely fast production builds with efficient dependency pre-bundling.
* **PWA Ready:** Easy integration with plugins like `vite-plugin-pwa` for offline support, caching, and installability.
* **Clear Structure:** Feature-based folder organisation (`/src/features/auth/`, `/src/features/transactions/`), keeping code modular and maintainable.

---

## 5. Development Workflow

* During **development**, the **Vite Dev Server** runs locally, serving React assets and proxying API requests to the backend (avoiding CORS).
* In **production**, the React app is built into static assets and deployed on **Vercel**.
* The **backend API** (Node.js/Express) is deployed separately on **Railway**. The frontend communicates with it via HTTPS requests to exposed endpoints.
* Database operations are managed by **Prisma**, interfacing with PostgreSQL on Railway.

---

## 6. Folder Structure (Planned)

```
/frontend         # React + Vite PWA
/backend          # Node.js/Express API
/docs             # Architecture diagrams, documentation
```

---

## 7. Summary

This combination of **React + Vite + Node.js + PostgreSQL** provides:

* A modern developer experience (fast iteration, clean tooling)
* A scalable, modular, and maintainable codebase
* A reliable deployment pipeline across Vercel (frontend) and Railway (backend + DB)
* Strong integration with PayFast for secure fintech transactions

